name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Optional: Add scheduled runs
  # schedule:
  #   - cron: '0 0 * * *' # Runs daily at midnight

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DEPLOY_PATH: /var/www/bizmatchke

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: bizmatchke_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Test database connection
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        echo "Testing database connection..."
        node -e "
          const { Pool } = require('pg');
          try {
            const dbUrl = process.env.DATABASE_URL;
            console.log('Database URL starts with:', dbUrl.substring(0, 20) + '...');
            
            // Try different SSL configurations
            const sslConfigs = [
              { ssl: false },
              { ssl: { rejectUnauthorized: false } },
              { ssl: true }
            ];
            
            async function tryConnection(config) {
              try {
                const pool = new Pool({
                  connectionString: dbUrl,
                  ...config
                });
                await pool.query('SELECT 1');
                console.log('Database connection successful with config:', config);
                process.exit(0);
              } catch (err) {
                console.log('Connection failed with config:', config, 'Error:', err.message);
                return false;
              }
            }
            
            // Try each configuration
            for (const config of sslConfigs) {
              console.log('Trying connection with config:', config);
              const success = await tryConnection(config);
              if (success) break;
            }
            
            console.error('All connection attempts failed');
            process.exit(1);
          } catch (err) {
            console.error('Error setting up database connection:', err.message);
            process.exit(1);
          }
        "

    - name: Run database migrations
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        NODE_ENV: test
      run: |
        echo "Running migrations with database URL: ${DATABASE_URL:0:20}..." # Log first 20 chars for debugging
        npm run migrate

    - name: Run linting
      run: npm run lint

    - name: Run tests
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
      run: npm test

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

    - name: Deploy to production server
      run: |
        ssh ${{ secrets.SERVER_BOT }}@${{ secrets.SERVER_IP }} "cd ${{ env.DEPLOY_PATH }} && ./deploy.sh" 
