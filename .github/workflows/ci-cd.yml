name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Optional: Add scheduled runs
  # schedule:
  #   - cron: '0 0 * * *' # Runs daily at midnight

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DEPLOY_PATH: /var/www/bizmatchke
  DATABASE_URL: ${{ secrets.DATABASE_URL }}

jobs:
  test:
    runs-on: ubuntu-latest
    environment: feature
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: bizmatchke_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Verify secrets
      run: |
        echo "Checking available secrets..."
        if [ -n "${{ secrets.DATABASE_URL }}" ]; then
          echo "DATABASE_URL secret exists"
        else
          echo "DATABASE_URL secret is not set"
        fi
        if [ -n "${{ secrets.GROQ_API_KEY }}" ]; then
          echo "GROQ_API_KEY secret exists"
        else
          echo "GROQ_API_KEY secret is not set"
        fi
        if [ -n "${{ secrets.SESSION_SECRET }}" ]; then
          echo "SESSION_SECRET secret exists"
        else
          echo "SESSION_SECRET secret is not set"
        fi

    - name: Test database connection
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        echo "Testing database connection..."
        echo "Checking if DATABASE_URL secret exists..."
        if [ -z "$DATABASE_URL" ]; then
          echo "DATABASE_URL is empty or not set"
          exit 1
        fi
        echo "DATABASE_URL is set (length: ${#DATABASE_URL})"
        
        cat > test-db.js << 'EOF'
        const { Pool } = require('pg');

        async function testConnection() {
          // Verify DATABASE_URL is set
          if (!process.env.DATABASE_URL) {
            console.error('DATABASE_URL environment variable is not set');
            process.exit(1);
          }

          const dbUrl = process.env.DATABASE_URL;
          console.log('Database URL length:', dbUrl.length);
          console.log('Database URL starts with:', dbUrl.substring(0, 20) + '...');
          console.log('Database URL ends with:', '...' + dbUrl.substring(dbUrl.length - 20));

          // Parse the URL to verify its structure
          try {
            const url = new URL(dbUrl);
            console.log('URL parsed successfully:');
            console.log('- Protocol:', url.protocol);
            console.log('- Host:', url.hostname);
            console.log('- Port:', url.port);
            console.log('- Database:', url.pathname.slice(1));
            console.log('- Username:', url.username);
            console.log('- Has password:', !!url.password);
            console.log('- Search params:', url.search);
          } catch (err) {
            console.error('Failed to parse DATABASE_URL:', err.message);
            process.exit(1);
          }

          const config = {
            connectionString: dbUrl,
            ssl: {
              rejectUnauthorized: false
            }
          };

          console.log('Attempting connection with config:', JSON.stringify({
            ...config,
            connectionString: config.connectionString.substring(0, 20) + '...'
          }, null, 2));
          
          try {
            const pool = new Pool(config);
            const client = await pool.connect();
            console.log('Successfully connected to database');
            await client.query('SELECT 1');
            console.log('Successfully executed test query');
            client.release();
            await pool.end();
            process.exit(0);
          } catch (err) {
            console.error('Connection error:', err);
            process.exit(1);
          }
        }

        testConnection();
        EOF

        node test-db.js

    - name: Run database migrations
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        NODE_ENV: test
      run: |
        echo "Running migrations with database URL: ${DATABASE_URL:0:20}..." # Log first 20 chars for debugging
        npm run migrate

    - name: Run linting
      run: |
        echo "Running linting..."
        # Create a temporary .eslintrc.json file
        cat > .eslintrc.json << 'EOF'
        {
          "extends": "next/core-web-vitals"
        }
        EOF
        # Run linting with the new config
        npm run lint

    - name: Run tests
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
      run: npm test

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

    - name: Deploy to production server
      run: |
        ssh ${{ secrets.SERVER_BOT }}@${{ secrets.SERVER_IP }} "cd ${{ env.DEPLOY_PATH }} && ./deploy.sh" 
